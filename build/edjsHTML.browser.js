var edjsHTML=function(){"use strict";var t={delimiter:function(){return"<br/>"},header:function(t){var n=t.data;return"<h"+n.level+"> "+n.text+" </h"+n.level+">"},paragraph:function(t){return"<p> "+t.data.text+" </p>"},list:function(t){var n=t.data,i="unordered"===n.style?"ul":"ol",e="";return n.items&&(e=n.items.map((function(t){return"<li> "+t+" </li>"})).reduce((function(t,n){return t+n}),"")),"<"+i+"> "+e+" </"+i+">"},image:function(t){var n=t.data,i='<img src="'+(n.file?n.file.url:"")+'" alt="'+n.caption+'" />';return""!==n.caption&&(i+='<p class="module-image-caption">'+n.caption+"</p>"),i},video:function(t){var n=t.data,i='<video controls src="'+(n.file?n.file.url:"")+'" alt="'+n.caption+'"></video>';return""!==n.caption&&(i+='<p class="module-video-caption">'+n.caption+"</p>"),i},quote:function(t){var n=t.data;return"<blockquote> "+n.text+" </blockquote> - "+n.caption},link:function(t){var n,i,e,o,l,r,a,u,c,d=t.data,s=[];return(null===(n=d.meta)||void 0===n?void 0:n.image)&&(null===(e=null===(i=d.meta)||void 0===i?void 0:i.image)||void 0===e?void 0:e.url)&&s.push('<div class="link-tool__image" style="background-image: url(&quot;'+(null===(l=null===(o=null==d?void 0:d.meta)||void 0===o?void 0:o.image)||void 0===l?void 0:l.url)+'&quot;);"></div>'),(null===(r=d.meta)||void 0===r?void 0:r.title)&&s.push('<div class="link-tool__title">'+(null===(a=d.meta)||void 0===a?void 0:a.title)+"</div>"),(null===(u=d.meta)||void 0===u?void 0:u.description)&&s.push('<p class="link-tool__description">'+(null===(c=d.meta)||void 0===c?void 0:c.description)+"</p>"),'<div class="link-tool"><a class="link-tool__content link-tool__content--rendered" target="_blank" rel="nofollow noindex noreferrer" href="'+d.link+'">'+s.join("")+'<span class="link-tool__anchor">'+d.link+"</span></a></div>"}};function n(t){return new Error('[31m The Parser function of type "'+t+'" is not defined. \n\n  Define your custom parser functions as: [34mhttps://github.com/pavittarx/editorjs-html#extend-for-custom-blocks [0m')}return function(i){return void 0===i&&(i={}),Object.assign(t,i),{parse:function(i){return i.blocks.map((function(i){return t[i.type]?t[i.type](i):n(i.type)}))},parseBlock:function(i){return t[i.type]?t[i.type](i):n(i.type)}}}}();
